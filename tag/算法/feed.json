{
    "version": "https://jsonfeed.org/version/1",
    "title": "hexo-blog • All posts by \"算法\" tag",
    "description": "record some markdown",
    "home_page_url": "https://ceilzcx.github.io/hexo-blog",
    "items": [
        {
            "id": "https://ceilzcx.github.io/hexo-blog/2021/07/15/algorithm/leetcode/",
            "url": "https://ceilzcx.github.io/hexo-blog/2021/07/15/algorithm/leetcode/",
            "title": "leetcode",
            "date_published": "2021-07-15T16:09:58.000Z",
            "content_html": "<h2 id=\"算法心得leetcode\"><a class=\"markdownIt-Anchor\" href=\"#算法心得leetcode\">#</a> 算法心得 ——LeetCode</h2>\n<p>所有题目转载自 LeetCode：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20v\">https://leetcode-cn.com/</span></p>\n<h4 id=\"1-两数之和\"><a class=\"markdownIt-Anchor\" href=\"#1-两数之和\">#</a> 1、两数之和</h4>\n<blockquote>\n<p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>\n<p>你可以按任意顺序返回答案。</p>\n</blockquote>\n<p>示例 1：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [2,7,11,15], target = 9</span><br><span class=\"line\">输出：[0,1]</span><br><span class=\"line\">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure>\n<h4 id=\"解题\"><a class=\"markdownIt-Anchor\" href=\"#解题\">#</a> 解题：</h4>\n<p>思路一：使用  <code>HashMap</code>  或者  <code>HashTable</code> ，空间换时间。时间复杂度和空间复杂度都为 O (n)。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] twoSum(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">    HashMap&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.containsKey(nums[i])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;map.get(nums[i]), i&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map.put(target - nums[i], i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-两数相加\"><a class=\"markdownIt-Anchor\" href=\"#2-两数相加\">#</a> 2、两数相加</h4>\n<blockquote>\n<p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p>\n<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>\n<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\n</blockquote>\n<p>示例 1：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：l1 = [2,4,3], l2 = [5,6,4]</span><br><span class=\"line\">输出：[7,0,8]</span><br><span class=\"line\">解释：342 + 465 = 807.</span><br></pre></td></tr></table></figure>\n<h4 id=\"解题-2\"><a class=\"markdownIt-Anchor\" href=\"#解题-2\">#</a> 解题：</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ListNode <span class=\"title function_\">addTwoNumbers</span><span class=\"params\">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">boolean</span> <span class=\"variable\">moreThanTen</span> <span class=\"operator\">=</span> (l1.val + l2.val) &gt;= <span class=\"number\">10</span>;</span><br><span class=\"line\">       <span class=\"type\">ListNode</span> <span class=\"variable\">root</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>((l1.val + l2.val) % <span class=\"number\">10</span>);</span><br><span class=\"line\">       <span class=\"type\">ListNode</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\">       <span class=\"type\">ListNode</span> <span class=\"variable\">zero</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(<span class=\"number\">0</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (l1.next != <span class=\"literal\">null</span> || l2.next != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">           l1 = l1.next == <span class=\"literal\">null</span> ? zero : l1.next;</span><br><span class=\"line\">           l2 = l2.next == <span class=\"literal\">null</span> ? zero : l2.next;</span><br><span class=\"line\">           <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> l1.val + l2.val;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (moreThanTen) val++;</span><br><span class=\"line\">           moreThanTen = val &gt;= <span class=\"number\">10</span>;</span><br><span class=\"line\">           <span class=\"type\">ListNode</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(val % <span class=\"number\">10</span>);</span><br><span class=\"line\">           now.next = next;</span><br><span class=\"line\">           now = next;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (moreThanTen) &#123;</span><br><span class=\"line\">           now.next = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(<span class=\"number\">1</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-无重复字符的最长子串\"><a class=\"markdownIt-Anchor\" href=\"#3-无重复字符的最长子串\">#</a> 3、无重复字符的最长子串</h4>\n<blockquote>\n<p>给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>\n</blockquote>\n<p>示例 1：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;abcabcbb&quot;</span><br><span class=\"line\">输出: 3 </span><br><span class=\"line\">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure>\n<h4 id=\"解题-3\"><a class=\"markdownIt-Anchor\" href=\"#解题-3\">#</a> 解题：</h4>\n<p>思路一：滑动窗口，左右两个 index，存在重复的字符，左下标 + 1，否则右下标 + 1。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">null</span> || s.length() == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, left = <span class=\"number\">0</span>, right = <span class=\"number\">1</span>, i;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (right != s.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = left; i &lt; right; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.charAt(right) == s.charAt(i)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == right) &#123;</span><br><span class=\"line\">            right++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res = Math.max(right - left, res);</span><br><span class=\"line\">            left = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.max(right - left, res);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>思路二：在一的基础上，查找字符是否重复，采用数组存储，减少查找时间。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">128</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    Arrays.fill(arr, -<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> s.charAt(i);</span><br><span class=\"line\">        left = Math.max(arr[c] + <span class=\"number\">1</span>, left);</span><br><span class=\"line\">        max = Math.max(max, i - left + <span class=\"number\">1</span>);</span><br><span class=\"line\">        arr[c] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-最长回文子串\"><a class=\"markdownIt-Anchor\" href=\"#5-最长回文子串\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbG9uZ2VzdC1wYWxpbmRyb21pYy1zdWJzdHJpbmcv\">5. 最长回文子串</span></h4>\n<blockquote>\n<p>给你一个字符串  <code>s</code> ，找到  <code>s</code>  中最长的回文子串。</p>\n</blockquote>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;babad&quot;</span><br><span class=\"line\">输出：&quot;bab&quot;</span><br><span class=\"line\">解释：&quot;aba&quot; 同样是符合题意的答案。</span><br></pre></td></tr></table></figure>\n<h4 id=\"解题-4\"><a class=\"markdownIt-Anchor\" href=\"#解题-4\">#</a> 解题</h4>\n<p>滑动窗口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">longestPalindrome</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, right = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">maxSpace</span> <span class=\"operator\">=</span> Math.min(i, s.length() - i - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt;= maxSpace; j++) &#123;                <span class=\"comment\">// aba</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.charAt(i - j) == s.charAt(i + j)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (right - left &lt; <span class=\"number\">2</span> * j) &#123;</span><br><span class=\"line\">                    left = i - j;</span><br><span class=\"line\">                    right = i + j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        maxSpace = Math.min(i, s.length() - i - <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt;= maxSpace; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.charAt(i - j) == s.charAt(i + j + <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (right - left &lt; <span class=\"number\">2</span> * j + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    left = i - j;</span><br><span class=\"line\">                    right = i + j + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.substring(left, right + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"8-字符串转换整数-atoi\"><a class=\"markdownIt-Anchor\" href=\"#8-字符串转换整数-atoi\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc3RyaW5nLXRvLWludGVnZXItYXRvaS8=\">8. 字符串转换整数 (atoi)</span></h4>\n<blockquote>\n<p>请你来实现一个 myAtoi (string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。</p>\n<p>函数 myAtoi (string s) 的算法如下：</p>\n<p>读入字符串并丢弃无用的前导空格<br>\n检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。<br>\n读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。<br>\n将前面步骤读入的这些数字转换为整数（即，“123” -&gt; 123， “0032” -&gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。<br>\n如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。<br>\n返回整数作为最终结果。<br>\n注意：</p>\n<p>本题中的空白字符只包括空格字符 ’ ’ 。<br>\n除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。</p>\n</blockquote>\n<h4 id=\"解题-5\"><a class=\"markdownIt-Anchor\" href=\"#解题-5\">#</a> 解题</h4>\n<p>找规律：（±）（\\d+）</p>\n<p>其他：也可以考虑使用正则匹配</p>\n<p>​\t\t\t考虑使用有限状态机</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">myAtoi</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">    s = s.trim();</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">negative</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">        c = s.charAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> &amp;&amp; c == <span class=\"string\">&#x27;-&#x27;</span>) &#123;</span><br><span class=\"line\">            negative = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> &amp;&amp; c == <span class=\"string\">&#x27;+&#x27;</span>) &#123;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">                res = res * <span class=\"number\">10</span> + (c - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res &gt; Math.pow(<span class=\"number\">2</span>, <span class=\"number\">31</span>) - <span class=\"number\">1</span> &amp;&amp; !negative) &#123;</span><br><span class=\"line\">            res = (<span class=\"type\">long</span>) (Math.pow(<span class=\"number\">2</span>, <span class=\"number\">31</span>) - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res &gt; Math.pow(<span class=\"number\">2</span>, <span class=\"number\">31</span>) &amp;&amp; negative) &#123;</span><br><span class=\"line\">            res = (<span class=\"type\">long</span>) Math.pow(<span class=\"number\">2</span>, <span class=\"number\">31</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (negative) <span class=\"keyword\">return</span> (<span class=\"type\">int</span>) -res;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"type\">int</span>) res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"11-盛最多水的容器\"><a class=\"markdownIt-Anchor\" href=\"#11-盛最多水的容器\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY29udGFpbmVyLXdpdGgtbW9zdC13YXRlci8=\">11. 盛最多水的容器</span></h4>\n<blockquote>\n<p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>\n<p>说明：你不能倾斜容器。</p>\n</blockquote>\n<h4 id=\"解题-6\"><a class=\"markdownIt-Anchor\" href=\"#解题-6\">#</a> 解题</h4>\n<p>采用双指针的方式：left 指向头，right 指向末端。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxArea</span><span class=\"params\">(<span class=\"type\">int</span>[] height)</span> &#123;        </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, right = height.length - <span class=\"number\">1</span>;        </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;        </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;            </span><br><span class=\"line\">        res = Math.max(res, Math.min(height[left], height[right]) </span><br><span class=\"line\">                       * (right - left));            </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (height[left] &lt; height[right]) &#123;                </span><br><span class=\"line\">            left++;            </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;                </span><br><span class=\"line\">            right--;            </span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\">    &#125;        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"15-三数之和\"><a class=\"markdownIt-Anchor\" href=\"#15-三数之和\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvM3N1bS8=\">15. 三数之和</span></h4>\n<blockquote>\n<p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。</p>\n<p>注意：答案中不可以包含重复的三元组。</p>\n</blockquote>\n<p>示例 1：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [-1,0,1,2,-1,-4]输出：[[-1,-1,2],[-1,0,1]]</span><br></pre></td></tr></table></figure>\n<h4 id=\"解题-7\"><a class=\"markdownIt-Anchor\" href=\"#解题-7\">#</a> 解题</h4>\n<p>本题个人感觉最的难点是数据重复问题，使用 HashMap 的话解决数据重复比较困难。</p>\n<p>使用双指针解决，将第二重和第三重循环合并为 O (n) 的复杂度。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">threeSum</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.length &lt; <span class=\"number\">3</span>) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    <span class=\"type\">int</span> left, right;</span><br><span class=\"line\">    Arrays.sort(nums);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>; <span class=\"comment\">// 第一个数大于 0，后面的数都比它大，肯定不成立了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] == nums[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>; <span class=\"comment\">// 去掉重复情况</span></span><br><span class=\"line\">        left = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] + nums[left] + nums[right] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                right--;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[i] + nums[left] + nums[right] &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                res.add(Arrays.asList(nums[i], nums[left], nums[right]));</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">                right--; <span class=\"comment\">// 首先无论如何先要进行加减操作                    </span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left - <span class=\"number\">1</span>]) left++;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right + <span class=\"number\">1</span>]) right--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"34-在排序数组中查找元素的第一个和最后一个位置\"><a class=\"markdownIt-Anchor\" href=\"#34-在排序数组中查找元素的第一个和最后一个位置\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmluZC1maXJzdC1hbmQtbGFzdC1wb3NpdGlvbi1vZi1lbGVtZW50LWluLXNvcnRlZC1hcnJheS8=\">34. 在排序数组中查找元素的第一个和最后一个位置</span></h4>\n<blockquote>\n<p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</p>\n<p>如果数组中不存在目标值 target，返回 [-1, -1]。</p>\n</blockquote>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [5,7,7,8,8,10], target = 8输出：[3,4]</span><br></pre></td></tr></table></figure>\n<h4 id=\"解题-8\"><a class=\"markdownIt-Anchor\" href=\"#解题-8\">#</a> 解题</h4>\n<p>作为已排序的数组查找元素，首先想到的是<strong>二分查找</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] searchRange(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>, middle = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    res[<span class=\"number\">1</span>] = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[middle] == target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> middle; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[i] != target) &#123;</span><br><span class=\"line\">                    res[<span class=\"number\">0</span>] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> middle; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[i] != target) &#123;</span><br><span class=\"line\">                    res[<span class=\"number\">1</span>] = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[middle] &gt; target) &#123;</span><br><span class=\"line\">            right = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            left = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        middle = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res[<span class=\"number\">0</span>] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    res[<span class=\"number\">1</span>] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"41-缺失的第一个正数\"><a class=\"markdownIt-Anchor\" href=\"#41-缺失的第一个正数\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmlyc3QtbWlzc2luZy1wb3NpdGl2ZS8=\">41. 缺失的第一个正数</span></h4>\n<blockquote>\n<p>给你一个未排序的整数数组  <code>nums</code>  ，请你找出其中没有出现的最小的正整数。</p>\n<p>请你实现时间复杂度为  <code>O(n)</code>  并且只使用常数级别额外空间的解决方案。</p>\n</blockquote>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,0]输出：3</span><br></pre></td></tr></table></figure>\n<h4 id=\"解题-9\"><a class=\"markdownIt-Anchor\" href=\"#解题-9\">#</a> 解题</h4>\n<p>遍历和 HashSet，时间复杂度 O (n)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">firstMissingPositive</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    HashSet&lt;Integer&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : nums) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            set.add(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!set.contains(i)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"55-跳跃游戏\"><a class=\"markdownIt-Anchor\" href=\"#55-跳跃游戏\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvanVtcC1nYW1lLw==\">55. 跳跃游戏</span></h4>\n<blockquote>\n<p>给定一个非负整数数组  <code>nums</code>  ，你最初位于数组的 <strong>第一个下标</strong> 。</p>\n<p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p>\n<p>判断你是否能够到达最后一个下标。</p>\n</blockquote>\n<p>示例 1：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [2,3,1,1,4]输出：true解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。</span><br></pre></td></tr></table></figure>\n<h4 id=\"解题-10\"><a class=\"markdownIt-Anchor\" href=\"#解题-10\">#</a> 解题</h4>\n<p>采用数组表示，循环向后判断是否可达</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">canJump</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"type\">boolean</span>[] isArrive = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[nums.length];</span><br><span class=\"line\">    isArrive[<span class=\"number\">0</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isArrive[i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt;= nums[i]; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i + j == nums.length - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                isArrive[i + j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isArrive[nums.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果 k 可达，那么 k 之前的所有位置都可达，循环判断可以达到的最大距离，如果当前位置不可达，说明后面位置也不可达。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">canJump</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; res) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        res = Math.max(i + nums[i], res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"62-不同路径\"><a class=\"markdownIt-Anchor\" href=\"#62-不同路径\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdW5pcXVlLXBhdGhzLw==\">62. 不同路径</span></h4>\n<blockquote>\n<p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p>\n<p>问总共有多少条不同的路径？</p>\n</blockquote>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：m = 3, n = 7</span><br><span class=\"line\">输出：28</span><br></pre></td></tr></table></figure>\n<h4 id=\"解题-11\"><a class=\"markdownIt-Anchor\" href=\"#解题-11\">#</a> 解题</h4>\n<p>位置为（i，j）的路径 = （i+1，j）的路径 + （i，j+1）的路径</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[][] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[m][n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        arr[m - <span class=\"number\">1</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        arr[i][n - <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> m - <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> n - <span class=\"number\">2</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">            arr[i][j] = arr[i + <span class=\"number\">1</span>][j] + arr[i][j + <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"64-最小路径和\"><a class=\"markdownIt-Anchor\" href=\"#64-最小路径和\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWluaW11bS1wYXRoLXN1bS8=\">64. 最小路径和</span></h4>\n<blockquote>\n<p>给定一个包含非负整数的  <code>*m* x *n*</code>  网格  <code>grid</code>  ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p>\n<p>** 说明：** 每次只能向下或者向右移动一步。</p>\n</blockquote>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：grid = [[1,3,1],[1,5,1],[4,2,1]]</span><br><span class=\"line\">输出：7</span><br><span class=\"line\">解释：因为路径 1→3→1→1→1 的总和最小。</span><br></pre></td></tr></table></figure>\n<h4 id=\"解题-12\"><a class=\"markdownIt-Anchor\" href=\"#解题-12\">#</a> 解题</h4>\n<p>动态规划的思想： <code>min[i][j] = min(min[i-1][j], min[i][j-1])+grid[i][j]</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minPathSum</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> grid.length, n = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"type\">int</span>[][] res = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[m][n];</span><br><span class=\"line\">    res[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = grid[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        res[<span class=\"number\">0</span>][i] = res[<span class=\"number\">0</span>][i - <span class=\"number\">1</span>] + grid[<span class=\"number\">0</span>][i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        res[i][<span class=\"number\">0</span>] = res[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] + grid[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            res[i][j] = Math.min(res[i - <span class=\"number\">1</span>][j], res[i][j - <span class=\"number\">1</span>]) + grid[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res[m - <span class=\"number\">1</span>][n - <span class=\"number\">1</span>];</span><br></pre></td></tr></table></figure>\n<p>空间优化： <code>min(min[i-1][j], min[i][j-1])</code>  可以通过一个一维数组表示，每次选出一行每个位置的最小距离。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minPathSum</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> grid.length, n = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\">    Arrays.fill(res, Integer.MAX_VALUE);</span><br><span class=\"line\">    res[<span class=\"number\">0</span>] = grid[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            res[<span class=\"number\">0</span>] = res[<span class=\"number\">0</span>] + grid[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            res[j] = Math.min(res[j - <span class=\"number\">1</span>], res[j]) + grid[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res[n - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"71-简化路径\"><a class=\"markdownIt-Anchor\" href=\"#71-简化路径\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2ltcGxpZnktcGF0aC8=\">71. 简化路径</span></h4>\n<blockquote>\n<p>给你一个字符串 path ，表示指向某一文件或目录的 Unix 风格 绝对路径 （以 ‘/’ 开头），请你将其转化为更加简洁的规范路径。</p>\n<p>在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点 （…） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，’//’）都被视为单个斜杠 ‘/’ 。 对于此问题，任何其他格式的点（例如，’…’）均被视为文件 / 目录名称。</p>\n<p>请注意，返回的 规范路径 必须遵循下述格式：</p>\n<p>始终以斜杠 ‘/’ 开头。<br>\n两个目录名之间必须只有一个斜杠 ‘/’ 。<br>\n最后一个目录名（如果存在）不能 以 ‘/’ 结尾。<br>\n此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 ‘.’ 或 ‘…’）。<br>\n返回简化后得到的 规范路径 。</p>\n</blockquote>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：path = &quot;/home/&quot;</span><br><span class=\"line\">输出：&quot;/home&quot;</span><br><span class=\"line\">解释：注意，最后一个目录名后面没有斜杠。 </span><br></pre></td></tr></table></figure>\n<h4 id=\"解题-13\"><a class=\"markdownIt-Anchor\" href=\"#解题-13\">#</a> 解题</h4>\n<p>路径存在  <code>.</code>  和  <code>..</code>  两种特殊形式，将路径放在栈中，遇到返回上一页就执行 <code>pop</code>  操作，正常路径执行 <code>push</code>  操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">simplifyPath</span><span class=\"params\">(String path)</span> &#123;</span><br><span class=\"line\">    Stack&lt;String&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">    String[] paths = path.split(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String s : paths) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.equals(<span class=\"string\">&quot;&quot;</span>) || s.equals(<span class=\"string\">&quot;.&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.equals(<span class=\"string\">&quot;..&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!stack.empty()) stack.pop();</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stack.push(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">StringBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String s : stack) &#123;</span><br><span class=\"line\">        builder.append(<span class=\"string\">&quot;/&quot;</span>).append(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> builder.length() == <span class=\"number\">0</span> ? <span class=\"string\">&quot;/&quot;</span> : builder.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"72-编辑距离\"><a class=\"markdownIt-Anchor\" href=\"#72-编辑距离\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZWRpdC1kaXN0YW5jZS8=\">72. 编辑距离</span></h4>\n<blockquote>\n<p>给你两个单词 word1 和 word2，请你计算出将 word1 转换成 word2 所使用的最少操作数 。</p>\n<p>你可以对一个单词进行如下三种操作：</p>\n<p>插入一个字符<br>\n删除一个字符<br>\n替换一个字符</p>\n</blockquote>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：word1 = &quot;horse&quot;, word2 = &quot;ros&quot;</span><br><span class=\"line\">输出：3</span><br><span class=\"line\">解释：</span><br><span class=\"line\">horse -&gt; rorse (将 &#x27;h&#x27; 替换为 &#x27;r&#x27;)</span><br><span class=\"line\">rorse -&gt; rose (删除 &#x27;r&#x27;)</span><br><span class=\"line\">rose -&gt; ros (删除 &#x27;e&#x27;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"解题-14\"><a class=\"markdownIt-Anchor\" href=\"#解题-14\">#</a> 解题</h4>\n<p>min (i，j) : word1 的前 i 个元素转化为 word2 的前 i 个元素的最少操作。</p>\n<p>min (i-1，j) 和 min (i，j-1) 和 min (i，j) 的区别是 word1 或者 word2 添加了一个字符（对应上述三种操作的前两种），那必定在基础上 + 1。</p>\n<p>min (i-1，j-1) 和 min (i，j) 的区别是如果 word1 的第 i 个元素和 word2 的第 j 个元素相等，则操作一样，不相等执行替换操作（word1 第 i 个元素替换成 word2 第 j 个元素）。</p>\n<p>因此：min (i，j) = Min (min (i-1，j-1)(+1)，min (i-1，j)，min (i，j-1))</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minDistance</span><span class=\"params\">(String word1, String word2)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[][] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[word1.length() + <span class=\"number\">1</span>][word2.length() + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;= word1.length(); i++) &#123;</span><br><span class=\"line\">        arr[i][<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;= word2.length(); i++) &#123;</span><br><span class=\"line\">        arr[<span class=\"number\">0</span>][i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= word1.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt;= word2.length(); j++) &#123;</span><br><span class=\"line\">            t = arr[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (word1.charAt(i - <span class=\"number\">1</span>) != word2.charAt(j - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                t++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[i][j] = Math.min(t, Math.min(arr[i][j - <span class=\"number\">1</span>], arr[i - <span class=\"number\">1</span>][j]) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr[word1.length()][word2.length()];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>空间优化：需要两个变量，front 存在当前第 i 个元素的值，方便修改第 i 个元素后可以找到；pre 保存 min (i-1, j-1) 的值，获取 min (i, j) 值的时候需要用到。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minDistance2</span><span class=\"params\">(String word1, String word2)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[word1.length() + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;= word1.length(); i++) &#123;</span><br><span class=\"line\">        arr[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> front, pre;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; word2.length(); i++) &#123;</span><br><span class=\"line\">        pre = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">        arr[<span class=\"number\">0</span>]++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt;= word1.length(); j++) &#123;</span><br><span class=\"line\">            front = arr[j];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (word2.charAt(i) != word1.charAt(j - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                pre++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j] = Math.min(pre, Math.min(arr[j - <span class=\"number\">1</span>], arr[j]) + <span class=\"number\">1</span>);</span><br><span class=\"line\">            pre = front;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr[word1.length()];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"74-搜索二维矩阵\"><a class=\"markdownIt-Anchor\" href=\"#74-搜索二维矩阵\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2VhcmNoLWEtMmQtbWF0cml4Lw==\">74. 搜索二维矩阵</span></h4>\n<blockquote>\n<p>编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。</p>\n<p>该矩阵具有如下特性：</p>\n<p>每行中的整数从左到右按升序排列。<br>\n每行的第一个整数大于前一行的最后一个整数。</p>\n</blockquote>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3</span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure>\n<h4 id=\"解题-15\"><a class=\"markdownIt-Anchor\" href=\"#解题-15\">#</a> 解题</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean searchMatrix(int[][] matrix, int target) &#123;</span><br><span class=\"line\">    if (matrix.length == 0 || matrix[0].length == 0) return false;</span><br><span class=\"line\">    for (int i = 0; i &lt; matrix.length; i++) &#123;</span><br><span class=\"line\">        if (target &gt;= matrix[i][0]) &#123;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (i == 0) return false;</span><br><span class=\"line\">        for (int j = 0; j &lt; matrix[i - 1].length; j++) &#123;</span><br><span class=\"line\">            if (target &lt; matrix[i - 1][j]) return false;</span><br><span class=\"line\">            if (target == matrix[i - 1][j]) return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int last = matrix.length - 1;</span><br><span class=\"line\">    // 处理最后一行</span><br><span class=\"line\">    for (int i = 0; i &lt; matrix[last].length; i++) &#123;</span><br><span class=\"line\">        if (target &lt; matrix[last][i]) return false;</span><br><span class=\"line\">        if (target == matrix[last][i]) return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"202-快乐数\"><a class=\"markdownIt-Anchor\" href=\"#202-快乐数\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaGFwcHktbnVtYmVyLw==\">202. 快乐数</span></h4>\n<blockquote>\n<p>编写一个算法来判断一个数 n 是不是快乐数。</p>\n<p>「快乐数」定义为：</p>\n<p>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。<br>\n然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。<br>\n如果 可以变为  1，那么这个数就是快乐数。<br>\n如果 n 是快乐数就返回 true ；不是，则返回 false 。</p>\n</blockquote>\n<h4 id=\"解题-16\"><a class=\"markdownIt-Anchor\" href=\"#解题-16\">#</a> 解题</h4>\n<p>方法一：非快乐数最后一定以某组数进行循环，如何获取重复的数（并不一定第一个数就是循环的数），选取第一个数为可能循环的数，如果超过 10 次，仍在循环，选取当前计算的数为可能循环的数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isHappy</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> getNumber(n), first = next, i = <span class=\"number\">1</span>, pre;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (next == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">       <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">           pre = next;</span><br><span class=\"line\">           next = getNumber(next);</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (next == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">           i++;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (i % <span class=\"number\">10</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               first = pre;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">while</span> (next != first);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getNumber</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           sum += Math.pow(n % <span class=\"number\">10</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">           n = n / <span class=\"number\">10</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>方法二：快慢指针，一个一倍速前进，一个二倍速前进，在循环中，快指针最好肯定能够追上慢的指针并与他相遇。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isHappy2</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">slow</span> <span class=\"operator\">=</span> n, fast = n;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        slow = getNumber(slow);</span><br><span class=\"line\">        fast = getNumber(fast);</span><br><span class=\"line\">        fast = getNumber(fast);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (slow == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (slow != fast);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"209-长度最小的子数组\"><a class=\"markdownIt-Anchor\" href=\"#209-长度最小的子数组\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWluaW11bS1zaXplLXN1YmFycmF5LXN1bS8=\">209. 长度最小的子数组</span></h4>\n<blockquote>\n<p>给定一个含有 n 个正整数的数组和一个正整数 target 。</p>\n<p>找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, …, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0。</p>\n</blockquote>\n<h4 id=\"解题-17\"><a class=\"markdownIt-Anchor\" href=\"#解题-17\">#</a> 解题</h4>\n<p>滑动窗口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minSubArrayLen</span><span class=\"params\">(<span class=\"type\">int</span> target, <span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, right = <span class=\"number\">0</span>, sum = <span class=\"number\">0</span>, res = Integer.MAX_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (right &lt; nums.length) &#123;</span><br><span class=\"line\">        sum += nums[right];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (sum &gt;= target) &#123;</span><br><span class=\"line\">            res = Math.min(res, right - left + <span class=\"number\">1</span>);</span><br><span class=\"line\">            sum -= nums[left++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        right++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res == Integer.MAX_VALUE) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"算法思路\"><a class=\"markdownIt-Anchor\" href=\"#算法思路\">#</a> 算法思路</h3>\n<h4 id=\"一-数组查找\"><a class=\"markdownIt-Anchor\" href=\"#一-数组查找\">#</a> 一、数组查找</h4>\n<ul>\n<li>排序数据查找 ——<strong> 二分查找</strong></li>\n<li>多个（一般为两个，如求和）数据查找 —— 可以使用<strong> Hash</strong> 来实现，空间复杂度增加。（  <code>HashMap</code> 、 <code>HashSet</code>  等）</li>\n</ul>\n<h4 id=\"二-滑动窗口\"><a class=\"markdownIt-Anchor\" href=\"#二-滑动窗口\">#</a> 二、滑动窗口</h4>\n<p>循环后面的元素需要和前面的元素挂钩，左右两个下标挪动。</p>\n<h4 id=\"三-双指针\"><a class=\"markdownIt-Anchor\" href=\"#三-双指针\">#</a> 三、双指针</h4>\n<p>和滑动窗口类似，通过两个下标操作，但双指针的右指针指向末尾。</p>\n<h4 id=\"四-动态规划\"><a class=\"markdownIt-Anchor\" href=\"#四-动态规划\">#</a> 四、动态规划</h4>\n<p>满足类似  <code>f(n) = f(n-1) + f(n-2)</code>  的规律，第 i 个值可以根据前面的值进行计算，一般通过找到规律列出函数，使用二维数组和循环可以解决。最难的部分是<strong>找规律</strong>。二维数组部分可以简化代码，如果只和最近的值相关，一般可以把二维数组转换为一维数组（参考 64、72）</p>\n",
            "tags": [
                "算法"
            ]
        }
    ]
}
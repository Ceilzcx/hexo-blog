{
    "version": "https://jsonfeed.org/version/1",
    "title": "hexo-blog • All posts by \"消息队列\" tag",
    "description": "record some markdown",
    "home_page_url": "https://ceilzcx.github.io/hexo-blog",
    "items": [
        {
            "id": "https://ceilzcx.github.io/hexo-blog/2021/10/14/mq/RocketMQ/",
            "url": "https://ceilzcx.github.io/hexo-blog/2021/10/14/mq/RocketMQ/",
            "title": "RocketMQ",
            "date_published": "2021-10-14T16:38:36.000Z",
            "content_html": "<h2 id=\"设计架构\"><a class=\"markdownIt-Anchor\" href=\"#设计架构\">#</a> 设计架构</h2>\n<h3 id=\"producer\"><a class=\"markdownIt-Anchor\" href=\"#producer\">#</a> Producer</h3>\n<blockquote>\n<p>消息提供 / 发布者，支持分布式和集群部署</p>\n</blockquote>\n<p>通过  <code>NameServer</code> ，获取  <code>Broker</code>  路由信息，通过负载均衡模块选择对应的  <code>Broker</code>  集群队列，并发布消息。</p>\n<p>投递的过程支持快速失败并且低延迟。</p>\n<h3 id=\"consumer\"><a class=\"markdownIt-Anchor\" href=\"#consumer\">#</a> Consumer</h3>\n<blockquote>\n<p>消息消费者，支持分布式和集群部署</p>\n</blockquote>\n<p>支持 push /pull 进行消费；支持集群（默认消费模式）和广播形式消费</p>\n<ul>\n<li>集群模式：同一个  <code>ConsumerGroup</code>  下，一条消息消费一次</li>\n<li>广播模式：同一个  <code>ConsumerGroup</code>  下，一条消息每个实例都消费一次</li>\n</ul>\n<p>实时消息订阅（订阅 topic）</p>\n<h3 id=\"nameserver\"><a class=\"markdownIt-Anchor\" href=\"#nameserver\">#</a> NameServer</h3>\n<blockquote>\n<p>topic 路由注册中心，（类似 dubbo 的 zookeeper），支持 broker 的注册和发现</p>\n</blockquote>\n<p><strong>AP 的设计：Availability（可用性）+ Partition Tolerance（分区容错性）</strong></p>\n<p><code>NameServer</code>  <strong>节点之间并不通信</strong>，各个时刻数据没法保持一致（不遵循 Consistency（一致性））</p>\n<p><strong>Broker 管理</strong>：接受 Broker 集群注册信息并保存作为路由信息的基本数据</p>\n<p><strong>提供健康检查</strong>：检查 Broker 是否存活</p>\n<p><em>每个  <code>NameServer</code>  将保存关于 Broker 集群的整个路由信息和用于客户端查询的队列信息，然后  <code>Producer</code>  和  <code>Conumser</code>  通过  <code>NameServer</code>  就可以知道整个 Broker 集群的路由信息，从而进行消息的投递和消费。</em></p>\n<p>如何注册 topic？</p>\n<ul>\n<li>\n<p>手动创建，指定对应的 broker 和消息队列数量进行创建</p>\n</li>\n<li>\n<p>自动创建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">autoCreateTopicEnable = true</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>生产发送消息时，如果指定的 Topic 不存在， <code>NameServer</code>  会返回一个【默认主题： <code>TBW102</code> 】的路由信息，使得生产者能够正常发生消息</p>\n</li>\n<li>\n<p>Broker 收到消息后，发现消息对应 Topic 不存在，且 Broker 允许自动创建 Topic，则会为消息创建 Topic ，并定时把路由信息同步至  <code>NameServer</code></p>\n</li>\n<li>\n<p>生产者也会定时从  <code>NameServer</code>  同步最新的路由信息，缓存至本地</p>\n</li>\n<li>\n<p>后续生产者发送消息时，就可以从本地的缓存中查询到对应 Topic 的路由信息了</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"brokerserver\"><a class=\"markdownIt-Anchor\" href=\"#brokerserver\">#</a> BrokerServer</h3>\n<blockquote>\n<p>broker 主要负责消息的存储、传递和查询以及服务高可用保证</p>\n</blockquote>\n<p>broker 分为 Master 和 Slave，对应关系通过相同  <code>BrokerName</code> ，不同的  <code>BrokerId</code>  来定义， <code>BrokerId = 0</code>  表示 Master；broker 支持一主多从，但是<strong>只有  <code>brokerId = 1</code>  的从服务器才会参与消息的读负载</strong> 。</p>\n<p>broker 定时将 topic 信息注册到  <code>NameServer</code></p>\n<h3 id=\"topic和tag\"><a class=\"markdownIt-Anchor\" href=\"#topic和tag\">#</a> Topic 和 Tag</h3>\n<ul>\n<li>topic 为 消费 和 提供者 订阅的一种主题</li>\n<li>tag 为 topic 更细粒度的一种划分。例：topic = order，你想要获取不同类型的订单，可以定义不同的 tag</li>\n</ul>\n<h2 id=\"网络部署\"><a class=\"markdownIt-Anchor\" href=\"#网络部署\">#</a> 网络部署</h2>\n<h3 id=\"特点\"><a class=\"markdownIt-Anchor\" href=\"#特点\">#</a> 特点</h3>\n<ul>\n<li>Producer 与  <code>NameServer</code>  集群的一个节点建立连接（随机），获取 topic 路由信息，与<strong> Master</strong> 建立长连接，并定时发送心跳</li>\n<li>Consumer 与  <code>NameServer</code>  集群的一个节点建立连接（随机），获取 topic 路由信息，与<strong> Master 和 Slave</strong> 建立长连接，并定时发送心跳</li>\n</ul>\n<h3 id=\"启动流程\"><a class=\"markdownIt-Anchor\" href=\"#启动流程\">#</a> 启动流程</h3>\n<ul>\n<li>NameServer 启动，等待 Broker、Producer、Consumer 连接</li>\n<li>Broker 启动，跟所有的 NameServer 保持长连接，定时发送心跳包。心跳包中包含当前 Broker 信息 (IP + 端口等) 以及存储所有 Topic 信息。注册成功后，NameServer 集群中就有 Topic 跟 Broker 的映射关系。</li>\n<li>收发消息前，先创建 Topic，创建 Topic 时需要指定该 Topic 要存储在哪些 Broker 上，也可以在发送消息时自动创建 Topic。</li>\n<li>Producer 发送消息，启动时先跟 NameServer 集群中的其中一台建立长连接，并从 NameServer 中获取当前发送的 Topic 存在哪些 Broker 上，轮询从队列列表中选择一个队列，然后与队列所在的 Broker 建立长连接从而向 Broker 发消息。</li>\n<li>Consumer 跟 Producer 类似，跟其中一台 NameServer 建立长连接，获取当前订阅 Topic 存在哪些 Broker 上，然后直接跟 Broker 建立连接通道，开始消费消息。</li>\n</ul>\n<h2 id=\"消息传输\"><a class=\"markdownIt-Anchor\" href=\"#消息传输\">#</a> 消息传输</h2>\n<h3 id=\"消息刷盘\"><a class=\"markdownIt-Anchor\" href=\"#消息刷盘\">#</a> 消息刷盘</h3>\n<ul>\n<li>同步刷盘：等待数据保存到磁盘，broker 返回成功的 ACK 响应</li>\n<li>异步刷盘：数据加载到 PageCache，就返回成功的 ACK 响应，启动一个新的新的进程将 PageCache 加载到磁盘</li>\n</ul>\n<h3 id=\"消息重复\"><a class=\"markdownIt-Anchor\" href=\"#消息重复\">#</a> 消息重复</h3>\n<h4 id=\"补充qos\"><a class=\"markdownIt-Anchor\" href=\"#补充qos\">#</a> 补充：QOS</h4>\n<blockquote>\n<p>Quality of Service，服务质量</p>\n</blockquote>\n<ul>\n<li>至少一次（at least once）</li>\n<li>最多一次（at most once）</li>\n<li>仅一次（Exactly once）</li>\n</ul>\n<p><strong>rocketMQ 支持 at least one</strong>，因此可能存在重复数据</p>\n<h3 id=\"回溯消费\"><a class=\"markdownIt-Anchor\" href=\"#回溯消费\">#</a> 回溯消费</h3>\n<p>注：fllink 中 end back 使用的 ？</p>\n<p>已经消费成功的消息，业务需要回退重新消费，通过时间维度回退（精确到毫秒）</p>\n<h3 id=\"定时消息\"><a class=\"markdownIt-Anchor\" href=\"#定时消息\">#</a> 定时消息</h3>\n<p><strong>定时消息（延迟队列）是指消息发送到 broker 后，不会立即被消费，等待特定时间投递给真正的 topic</strong>。 broker 有配置项 <code>messageDelayLevel</code> ，默认值为 <code>1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</code> ，18 个 level。</p>\n<h3 id=\"消息回查和消息重试\"><a class=\"markdownIt-Anchor\" href=\"#消息回查和消息重试\">#</a> 消息回查和消息重试</h3>\n<ul>\n<li>消息回查针对 Producer。用于事务的  <code>Haslf Message</code> ，默认回查 15 次。</li>\n<li>消息重试针对 Consumer。Comsumer 消费成功后需要返回  <code>Broker</code>  一个确认消息，<strong>如果没有返回则  <code>Broker</code>  认为这条消息消费失败，失败后会再重试消费该消息，默认重试 16 次</strong></li>\n</ul>\n<h3 id=\"死信消息\"><a class=\"markdownIt-Anchor\" href=\"#死信消息\">#</a> 死信消息</h3>\n<p>消息重试失败后，保持无法正常消费的消息。可以通过 console 控制台对死信队队列的消息进行重发。</p>\n<h3 id=\"消息顺序\"><a class=\"markdownIt-Anchor\" href=\"#消息顺序\">#</a> 消息顺序</h3>\n<p>部分消息按照业务需求需要按顺序进行消费。例：订单状态：订单创建 → 订单付款 → 订单完成</p>\n<ul>\n<li>分区顺序：根据 Sharding key 进行区块区分。可以采用 id 取 hash 放入不同的 消息队列，对消息队列进行先入先出操作，不同 id 之间互不影响</li>\n<li>全局顺序：指定 topic 下的所有消息按照先入先出（FIFO）进行发布和消费。适用性不高</li>\n</ul>\n<h3 id=\"消息过滤\"><a class=\"markdownIt-Anchor\" href=\"#消息过滤\">#</a> 消息过滤</h3>\n<p>通过 tag 进行消息过滤。消息过滤在 broker 实现，减少对 consumer 的网络传输，缺点增加 broker 负担，同时实现困难。</p>\n<h2 id=\"源码解析\"><a class=\"markdownIt-Anchor\" href=\"#源码解析\">#</a> 源码解析</h2>\n<p><img data-src=\"struct.png\" alt=\"代码结构\"></p>\n<h3 id=\"acl\"><a class=\"markdownIt-Anchor\" href=\"#acl\">#</a> acl</h3>\n<h3 id=\"broker\"><a class=\"markdownIt-Anchor\" href=\"#broker\">#</a> broker</h3>\n<h3 id=\"client\"><a class=\"markdownIt-Anchor\" href=\"#client\">#</a> client</h3>\n<p>rocketMQ 客户端实现</p>\n<h4 id=\"producer-2\"><a class=\"markdownIt-Anchor\" href=\"#producer-2\">#</a> Producer</h4>\n<p><img data-src=\"client-producer.PNG\" alt=\"client-producer\"></p>\n<p>主要逻辑在 package：producer 和 impl，真正的实现还是需要远程访问，需要用到 remoting 模块。</p>\n<h3 id=\"filter\"><a class=\"markdownIt-Anchor\" href=\"#filter\">#</a> filter</h3>\n<blockquote>\n<p>消息过滤，在 broker 和 consumer 中间加入了 filter 代理，主要有 broker 负责</p>\n</blockquote>\n<h3 id=\"namesrv\"><a class=\"markdownIt-Anchor\" href=\"#namesrv\">#</a> namesrv</h3>\n<p><code>NamesrvStartup</code>  是  <code>namesrv</code>  的启动类，具体的实现类为  <code>NamesrvController</code>  。</p>\n<p>create NamesrvController （create NamesrvConfig、create NettyServerConfig）</p>\n<p>NamesrvController（initialize、start）</p>\n<p><img data-src=\"namesrv.png\" alt=\"namesrv\"></p>\n<h3 id=\"remoting\"><a class=\"markdownIt-Anchor\" href=\"#remoting\">#</a> remoting</h3>\n<blockquote>\n<p>基于 netty 的底层通信实现</p>\n</blockquote>\n<h4 id=\"netty\"><a class=\"markdownIt-Anchor\" href=\"#netty\">#</a> netty</h4>\n<p>NettyRemotingServer /  NettyRemotingClient</p>\n<ul>\n<li>\n<p>read request 通过 InboundHandler 实现</p>\n</li>\n<li>\n<p>process request -&gt; response</p>\n<p>通过  <code>RequestProcessor</code>  接口，这样不同模块可以编写自己的实现类去转换 request</p>\n</li>\n<li>\n<p>write response 通过 writeAndFlush () 实现</p>\n</li>\n</ul>\n<h4 id=\"protocol\"><a class=\"markdownIt-Anchor\" href=\"#protocol\">#</a> protocol</h4>\n<blockquote>\n<p>协议相关实现，对应  <code>RemotingCommand</code></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>length</th>\n<th>head length</th>\n<th>head data</th>\n<th>body data</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4 byte</td>\n<td>4 byte</td>\n<td>head length</td>\n<td>length？</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"运行逻辑\"><a class=\"markdownIt-Anchor\" href=\"#运行逻辑\">#</a> 运行逻辑</h4>\n<ul>\n<li>client 封装 RemotingCommand 类，将消息传输给 Server。消息传输在  <code>AbstractNettyRemoting.invokeSyncImpl</code>  中</li>\n<li>Server 通过 channel 获取消息，再通过  <code>AbstractNettyRemoting.processRequestMessage</code>  将 request 转换为 response，并将结果发送回 client</li>\n<li>client 通过 channel 获取消息，再通过  <code>AbstractNettyRemoting.processResponseMessage</code>  处理返回的结果，获取结果执行其他逻辑。</li>\n</ul>\n<h3 id=\"srvutil\"><a class=\"markdownIt-Anchor\" href=\"#srvutil\">#</a> srvutil</h3>\n<blockquote>\n<p>解析命令行的工具类  <code>ServerUtil</code></p>\n</blockquote>\n<h3 id=\"store\"><a class=\"markdownIt-Anchor\" href=\"#store\">#</a> store</h3>\n<blockquote>\n<p>存储层实现，同时包括了索引服务，高可用 HA 服务实现</p>\n</blockquote>\n<p><code>ConsumeQueue</code>  <strong>不负责存储消息</strong>，只是负责记录它所属 Topic 的消息在 CommitLog 中的偏移量。</p>\n<p><code>DefaultMessageStore</code>  类下  <code>ReputMessageService</code>  的  <code>doReput</code>  ，每隔 1 毫秒循环，通知  <code>ConsumerQueue</code>  进行更新</p>\n<h4 id=\"顺序存储\"><a class=\"markdownIt-Anchor\" href=\"#顺序存储\">#</a> 顺序存储</h4>\n<p>由于  <code>Rocketmq</code>  的信息是存储到文件的，硬盘的存储和读取效率会低于内存，同时顺序读写和随机读写的效率相差极大（顺序写的速度好像比随机写快了千倍）， <code>DefaultMessageStore</code>  也是通过顺序读写实现的，Java 的顺序读写通过  <code>RandomAccessFile</code>  类实现。</p>\n<h3 id=\"tools\"><a class=\"markdownIt-Anchor\" href=\"#tools\">#</a> tools</h3>\n<blockquote>\n<p>mq 集群管理工具，提供了消息查询等功能</p>\n</blockquote>\n<h3 id=\"疑问\"><a class=\"markdownIt-Anchor\" href=\"#疑问\">#</a> 疑问</h3>\n<ul>\n<li><code>rocketmq-namesrv</code>  模块中  <code>KVConfingManager</code>  的作用？</li>\n<li><code>rocketmq-store</code>  模块中，一个 topic 对应多个 Queue</li>\n</ul>\n",
            "tags": [
                "消息队列"
            ]
        }
    ]
}